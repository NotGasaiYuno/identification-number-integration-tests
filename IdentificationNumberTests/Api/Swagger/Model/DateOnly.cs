/* 
 * OpenAPI Document on Azure Functions
 *
 * This is the OpenAPI Document on Azure Functions
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Swagger.Model
{
    /// <summary>
    /// DateOnly
    /// </summary>
    [DataContract]
    public partial class DateOnly :  IEquatable<DateOnly>
    {
        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DayOfWeekEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for 0
            /// </summary>
            [EnumMember(Value = "0")]
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for 1
            /// </summary>
            [EnumMember(Value = "1")]
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for 2
            /// </summary>
            [EnumMember(Value = "2")]
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for 3
            /// </summary>
            [EnumMember(Value = "3")]
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for 4
            /// </summary>
            [EnumMember(Value = "4")]
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for 5
            /// </summary>
            [EnumMember(Value = "5")]
            NUMBER_5 = 5,
            
            /// <summary>
            /// Enum NUMBER_6 for 6
            /// </summary>
            [EnumMember(Value = "6")]
            NUMBER_6 = 6
        }

        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [DataMember(Name="dayOfWeek", EmitDefaultValue=false)]
        public DayOfWeekEnum? DayOfWeek { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateOnly" /> class.
        /// </summary>
        /// <param name="Year">Year.</param>
        /// <param name="Month">Month.</param>
        /// <param name="Day">Day.</param>
        /// <param name="DayOfWeek">DayOfWeek (default to DayOfWeekEnum.NUMBER_0).</param>
        /// <param name="DayOfYear">DayOfYear.</param>
        /// <param name="DayNumber">DayNumber.</param>
        public DateOnly(int? Year = null, int? Month = null, int? Day = null, DayOfWeekEnum? DayOfWeek = null, int? DayOfYear = null, int? DayNumber = null)
        {
            this.Year = Year;
            this.Month = Month;
            this.Day = Day;
            // use default value if no "DayOfWeek" provided
            if (DayOfWeek == null)
            {
                this.DayOfWeek = DayOfWeekEnum.NUMBER_0;
            }
            else
            {
                this.DayOfWeek = DayOfWeek;
            }
            this.DayOfYear = DayOfYear;
            this.DayNumber = DayNumber;
        }
        
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }
        /// <summary>
        /// Gets or Sets Month
        /// </summary>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public int? Month { get; set; }
        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int? Day { get; set; }
        /// <summary>
        /// Gets or Sets DayOfYear
        /// </summary>
        [DataMember(Name="dayOfYear", EmitDefaultValue=false)]
        public int? DayOfYear { get; set; }
        /// <summary>
        /// Gets or Sets DayNumber
        /// </summary>
        [DataMember(Name="dayNumber", EmitDefaultValue=false)]
        public int? DayNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateOnly {\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  DayOfYear: ").Append(DayOfYear).Append("\n");
            sb.Append("  DayNumber: ").Append(DayNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DateOnly);
        }

        /// <summary>
        /// Returns true if DateOnly instances are equal
        /// </summary>
        /// <param name="other">Instance of DateOnly to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateOnly other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Year == other.Year ||
                    this.Year != null &&
                    this.Year.Equals(other.Year)
                ) && 
                (
                    this.Month == other.Month ||
                    this.Month != null &&
                    this.Month.Equals(other.Month)
                ) && 
                (
                    this.Day == other.Day ||
                    this.Day != null &&
                    this.Day.Equals(other.Day)
                ) && 
                (
                    this.DayOfWeek == other.DayOfWeek ||
                    this.DayOfWeek != null &&
                    this.DayOfWeek.Equals(other.DayOfWeek)
                ) && 
                (
                    this.DayOfYear == other.DayOfYear ||
                    this.DayOfYear != null &&
                    this.DayOfYear.Equals(other.DayOfYear)
                ) && 
                (
                    this.DayNumber == other.DayNumber ||
                    this.DayNumber != null &&
                    this.DayNumber.Equals(other.DayNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Year != null)
                    hash = hash * 59 + this.Year.GetHashCode();
                if (this.Month != null)
                    hash = hash * 59 + this.Month.GetHashCode();
                if (this.Day != null)
                    hash = hash * 59 + this.Day.GetHashCode();
                if (this.DayOfWeek != null)
                    hash = hash * 59 + this.DayOfWeek.GetHashCode();
                if (this.DayOfYear != null)
                    hash = hash * 59 + this.DayOfYear.GetHashCode();
                if (this.DayNumber != null)
                    hash = hash * 59 + this.DayNumber.GetHashCode();
                return hash;
            }
        }
    }

}
